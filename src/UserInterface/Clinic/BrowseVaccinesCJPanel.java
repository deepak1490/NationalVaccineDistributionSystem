/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Clinic;

import UserInterface.Provider.*;
import Business.Cdc;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProvidersEnterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.OrderOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.OrderProcessingRequest;
import UserInterface.SysAdmin.ViewVaccineDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deepak
 */
public class BrowseVaccinesCJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrowseProductsJPanel
     */
    private JPanel upc;
    private UserAccount ua;
    private Organization org;
    private ProvidersEnterprise enterprise;
    private Cdc system;
    private Order order;
    private static int count = 0;
    private boolean isCheckedOut = false;

    public BrowseVaccinesCJPanel(JPanel upc, UserAccount ua, Organization org, ProvidersEnterprise enterprise, Cdc system) {
        initComponents();
        this.upc = upc;
        this.ua = ua;
        this.org = org;
        this.enterprise = enterprise;
        this.system = system;
        if (isCheckedOut == false) {
            order = new Order();
        }

        populateVaccineDetailsTable();
    }

    private void populateVaccineDetailsTable() {
        DefaultTableModel dtm = (DefaultTableModel) vaccineDetailsJTable.getModel();
        dtm.setRowCount(0);
        for (Vaccine vaccine : system.getVaccineCatalog().getVaccineCatalog()) {
            Object row[] = new Object[3];
            row[0] = vaccine;
            row[1] = vaccine.getID();
            row[2] = vaccine.getDiseaseName();
            dtm.addRow(row);
        }
    }

    private void populateOrderDetailsTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderItemJTable.getModel();
        dtm.setRowCount(0);
        if (order != null) {
            for (OrderItem orderItem : order.getOrderItemList()) {
                Object row[] = new Object[2];
                row[0] = orderItem;
                row[1] = orderItem.getQuantity();
                dtm.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vaccineDetailsJTable = new javax.swing.JTable();
        viewVaccineJButton = new javax.swing.JButton();
        addToCartJButton = new javax.swing.JButton();
        quantityJSpinner = new javax.swing.JSpinner();
        quantityJLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemJTable = new javax.swing.JTable();
        viewOrderDetailsJButton = new javax.swing.JButton();
        removeItemJButton = new javax.swing.JButton();
        modifyQuantityJButton = new javax.swing.JButton();
        modifyQuantityJText = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        checkOutJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        vaccineDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Vaccine ID", "Disease Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vaccineDetailsJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 590, 75));

        viewVaccineJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        viewVaccineJButton.setText("View Vaccine Details");
        viewVaccineJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewVaccineJButtonActionPerformed(evt);
            }
        });
        add(viewVaccineJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, -1, -1));

        addToCartJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addToCartJButton.setText("ADD TO CART");
        addToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartJButtonActionPerformed(evt);
            }
        });
        add(addToCartJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 260, -1, -1));
        add(quantityJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 260, 50, 20));

        quantityJLabel.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        quantityJLabel.setText("Quantity");
        add(quantityJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 71, -1));

        orderItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemJTable);
        if (orderItemJTable.getColumnModel().getColumnCount() > 0) {
            orderItemJTable.getColumnModel().getColumn(0).setResizable(false);
            orderItemJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 310, 590, 75));

        viewOrderDetailsJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        viewOrderDetailsJButton.setText("View Order Details");
        viewOrderDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderDetailsJButtonActionPerformed(evt);
            }
        });
        add(viewOrderDetailsJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 420, 160, -1));

        removeItemJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        removeItemJButton.setText("Remove Item");
        removeItemJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemJButtonActionPerformed(evt);
            }
        });
        add(removeItemJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 390, -1, -1));

        modifyQuantityJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        modifyQuantityJButton.setText("Modify Quantity");
        modifyQuantityJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyQuantityJButtonActionPerformed(evt);
            }
        });
        add(modifyQuantityJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 420, -1, -1));
        add(modifyQuantityJText, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, 65, -1));

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 510, -1, -1));

        checkOutJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        checkOutJButton.setText("CheckOut");
        checkOutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutJButtonActionPerformed(evt);
            }
        });
        add(checkOutJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 510, -1, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Browse Vaccines Page");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = vaccineDetailsJTable.getSelectedRow();
        int selectedRowCount = vaccineDetailsJTable.getSelectedRowCount();
        boolean flag = true;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a vaccine");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one vaccine");
            return;
        }

        Vaccine vaccine = (Vaccine) vaccineDetailsJTable.getValueAt(selectedRow, 0);
        int quantity = (Integer) quantityJSpinner.getValue();
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity");
            return;
        }
        if (order == null) {
            order = new Order();
        } else {
            ArrayList<OrderItem> oi = order.getOrderItemList();
            for (OrderItem orderItem : oi) {
                if (orderItem.getVaccine().equals(vaccine)) {
                    orderItem.setQuantity(quantity);
                    flag = false;
                }

            }
        }
        if (flag == true) {
            OrderItem oItem = order.addOrderItem(vaccine, quantity, 0);
        }

        String message = String.valueOf(quantity) + " " + vaccine.getVaccineName() + " is added to the cart";
        JOptionPane.showMessageDialog(null, message);
        populateVaccineDetailsTable();
        populateOrderDetailsTable(order);

    }//GEN-LAST:event_addToCartJButtonActionPerformed

    private void viewVaccineJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewVaccineJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = vaccineDetailsJTable.getSelectedRow();
        int selectedRowCount = vaccineDetailsJTable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a product to view the details");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one product");
            return;
        }
        Vaccine vaccine = (Vaccine) vaccineDetailsJTable.getValueAt(selectedRow, 0);
        ViewVaccineDetailJPanel view = new ViewVaccineDetailJPanel(upc, vaccine);
        upc.add("ViewVaccineDetailJPanel", view);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewVaccineJButtonActionPerformed

    private void viewOrderDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderDetailsJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderItemJTable.getSelectedRow();
        int selectedRowCount = orderItemJTable.getSelectedRowCount();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a order to view the details");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one order");
            return;
        }

        OrderItem orderItem = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);
        ViewOrderItemDetailsJPanel view = new ViewOrderItemDetailsJPanel(upc, orderItem);
        upc.add("ViewOrderItemDetailsJPanel", view);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewOrderDetailsJButtonActionPerformed

    private void modifyQuantityJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyQuantityJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderItemJTable.getSelectedRow();
        int modifiedQuantity = 0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a product to modify the quantity");
            return;
        }

        OrderItem orderItem = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);
        try {
            modifiedQuantity = Integer.parseInt(modifyQuantityJText.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Enter a quantity to modify");
            return;
        }

        if (modifiedQuantity <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity is not appropriate");
            modifyQuantityJText.setText(null);
            return;
        }
        orderItem.setQuantity(modifiedQuantity);

        populateVaccineDetailsTable();
        populateOrderDetailsTable(order);

    }//GEN-LAST:event_modifyQuantityJButtonActionPerformed

    private void removeItemJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderItemJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        int selectedRowCount = orderItemJTable.getSelectedRowCount();
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one order");
            return;
        }
        OrderItem orderItem = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);
        order.removeOrderItem(orderItem);
        populateVaccineDetailsTable();
        populateOrderDetailsTable(order);
    }//GEN-LAST:event_removeItemJButtonActionPerformed

    private void checkOutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutJButtonActionPerformed
        // TODO add your handling code here:
        if (orderItemJTable.getRowCount() != 0) {
            int orderID = system.getQuantity();
            int updatedOrderID = orderID + 1;
            Employee employee = ua.getEmployee();
            Order addedOrder = employee.getMasterOrderCatalog().addOrder(order);
            if (addedOrder != null) {
                order.setOrderNumber(updatedOrderID);
                order.setOrderStatus("Processing");
                order = new Order();
                OrderProcessingRequest request = new OrderProcessingRequest();
                request.setStatus("Processing");
                request.setOrderProcessingStatus("Processing");
                request.setSender(ua);
                request.setOrderProcessId(updatedOrderID);
                request.setRequestType("Clinic");
                Organization org = null;
                Enterprise e1 = null;
                Network n = null;
                UserAccount user = null;
                for (Network network : system.getNetworkDirectory().getNetworkList()) {
                    for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e == enterprise) {
                            n = network;
                            break;
                        }
                    }
                }

                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof ProvidersEnterprise) {
                        for (Organization org1 : e.getOrganizationList().getOrganizationList()) {
                            if (org1 instanceof OrderOrganization) {
                                for (UserAccount ua : org1.getUserAccountDirectory().getUserAccountList()) {
                                    user = ua;
                                }
                            }
                        }
                    }
                }
                if (user != null) {
                    user.getWorkQueue().getWorkRequestList().add(request);
                    ua.getWorkQueue().getWorkRequestList().add(request);
                }
                JOptionPane.showMessageDialog(null, "Your Order has been checked out! Thanks!");

            } else {
                return;
            }
            isCheckedOut = true;
            populateVaccineDetailsTable();
            populateOrderDetailsTable(order);
        } else {
            JOptionPane.showMessageDialog(null, "There is no items to checkout");
        }
    }//GEN-LAST:event_checkOutJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        if (isCheckedOut == false) {
            JOptionPane.showMessageDialog(null, "Not checked out");

        }
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkOutJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyQuantityJButton;
    private javax.swing.JTextField modifyQuantityJText;
    private javax.swing.JTable orderItemJTable;
    private javax.swing.JLabel quantityJLabel;
    private javax.swing.JSpinner quantityJSpinner;
    private javax.swing.JButton removeItemJButton;
    private javax.swing.JTable vaccineDetailsJTable;
    private javax.swing.JButton viewOrderDetailsJButton;
    private javax.swing.JButton viewVaccineJButton;
    // End of variables declaration//GEN-END:variables
}
