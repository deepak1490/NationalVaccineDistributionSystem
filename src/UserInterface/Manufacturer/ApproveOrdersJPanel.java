/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Manufacturer;

import Business.Cdc;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.ManufactureFinanceRequest;
import Business.WorkQueue.ManufactureRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deepak
 */
public class ApproveOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ApproveOrdersJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    Cdc ecoSystem;
    Employee emp;

    public ApproveOrdersJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Cdc ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) ordersJTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {
            ManufactureRequest req = (ManufactureRequest) request;
            Object[] row = new Object[7];
            row[0] = req.getOrderId();
            for (Vaccine v : ecoSystem.getVaccineCatalog().getVaccineCatalog()) {
                if (v.getID() == req.getVaccineId()) {
                    row[1] = v.getVaccineName();
                }
            }
            row[2] = req.getVaccineId();
            row[3] = req.getQuantity();
            row[4] = req.getSender();
            row[5] = req;
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ordersJTable = new javax.swing.JTable();
        approveOrderJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        titleJLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ordersJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Vaccine Name", "Vaccine ID", "Quantity Required", "Requester Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordersJTable);
        if (ordersJTable.getColumnModel().getColumnCount() > 0) {
            ordersJTable.getColumnModel().getColumn(3).setResizable(false);
            ordersJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 640, 92));

        approveOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        approveOrderJButton.setText("Approve Order");
        approveOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderJButtonActionPerformed(evt);
            }
        });
        add(approveOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 270, -1, -1));

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, -1, -1));

        titleJLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        titleJLabel.setText("Approve Orders");
        add(titleJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void approveOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = ordersJTable.getSelectedRow();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.DATE, 5);

        Calendar c1 = Calendar.getInstance();
        c1.setTime(new Date());
        c1.add(Calendar.DATE, 365);
        Network n = null;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a order to approve");
            return;
        }
        ManufactureRequest request = (ManufactureRequest) ordersJTable.getValueAt(selectedRow, 5);
        if (request.getStatus().equals("Approved") || request.getStatus().equals("Rejected")) {
            JOptionPane.showMessageDialog(null, "Order Request already processed");
            return;
        }

        for (Network network : ecoSystem.getNetworkDirectory().getNetworkList()) {
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (e == enterprise) {
                    n = network;
                    break;
                }
            }
        }

        for (InventoryItem inventoryItem : n.getInventoryDirectory().getInventoryList()) {
            if (inventoryItem.getVaccine().getID() == request.getVaccineId()) {
                inventoryItem.setQuantity(inventoryItem.getQuantity() + request.getQuantity());
                inventoryItem.getVaccine().setManufactureDate(sdf.format(c.getTime()));
                inventoryItem.getVaccine().setExpiryDate(sdf.format(c1.getTime()));
                inventoryItem.getVaccine().setManufacturer(account.getEmployee().getFname());
            }
        }

        request.setStatus("Approved");
        JOptionPane.showMessageDialog(null, "Request processed");

        ManufactureFinanceRequest financeRequest = new ManufactureFinanceRequest();

        Vaccine vaccine1 = null;
        for (Vaccine vaccine : ecoSystem.getVaccineCatalog().getVaccineCatalog()) {
            if (vaccine.getID() == request.getVaccineId()) {
                vaccine1 = vaccine;
            }
        }
        financeRequest.setOrderId(request.getOrderProcessId());
        financeRequest.setPrice(vaccine1.getPrice() * request.getQuantity());
        financeRequest.setSender(account);
        financeRequest.setVaccine(vaccine1);
        financeRequest.setQuantity(request.getQuantity());
        financeRequest.setStatus("Payment Pending");
        ecoSystem.getNationalDistributor().getWorkQueue().getWorkRequestList().add(financeRequest);
        populateTable();
    }//GEN-LAST:event_approveOrderJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable ordersJTable;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
