/*
 * ManageHospitalCatalogJPanel.java
 *
 * Created on September 24, 2008, 2:40 PM
 */
package UserInterface.Provider;

import Business.Cdc;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.FinanceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deepak
 */
public class ManagePatientCatalogJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Organization organization;
    UserAccount userAccount;
    Enterprise enterprise;
    Cdc system;

    /**
     * Creates new form ManageProductCatalogJPanel
     */
    public ManagePatientCatalogJPanel(JPanel upc, Cdc system, UserAccount userAccount, Organization organization, Enterprise enterprise) {
        initComponents();
        userProcessContainer = upc;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        populateTable();

    }

    public void populateTable() {
        int rowCount = patientJTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        model.setRowCount(0);
        for (Patient patient : userAccount.getEmployee().getHospital().getPatientDirectory().getPatientDirectory()) {
            Object row[] = new Object[6];
            row[0] = patient;
            row[1] = patient.getName();
            row[2] = patient.getAge();
            row[3] = patient.getInsuranceStatus();
            row[4] = patient.getInsuranceCoverage();
            model.addRow(row);
        }
    }

    public void populateBill(Patient patient) {
        DefaultTableModel model = (DefaultTableModel) billJTable.getModel();
        model.setRowCount(0);
        for (Vaccine v : patient.getVaccineCatalog().getVaccineCatalog()) {
            Object row[] = new Object[4];
            row[0] = v.getVaccineName();
            row[1] = v.getAvailability();
            row[2] = v.getPrice();
            row[3] = v.getAvailability() * v.getPrice();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        deletePatientJButton = new javax.swing.JButton();
        viewbillPatientJButton = new javax.swing.JButton();
        addPatientJButton = new javax.swing.JButton();
        billPatientJButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        billJTable = new javax.swing.JTable();
        claimInsuranceJButton = new javax.swing.JButton();
        totalJLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Manage Patient Catalog");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, -1, -1));

        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Age", "Insurance Status", "Percentage Covered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 750, 190));

        deletePatientJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        deletePatientJButton.setText("Delete Patient(s)");
        deletePatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientJButtonActionPerformed(evt);
            }
        });
        add(deletePatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, -1, -1));

        viewbillPatientJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        viewbillPatientJButton.setText("View Patient Bill");
        viewbillPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbillPatientJButtonActionPerformed(evt);
            }
        });
        add(viewbillPatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 360, -1, -1));

        addPatientJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addPatientJButton.setText("Add Patient");
        addPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientJButtonActionPerformed(evt);
            }
        });
        add(addPatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 360, -1, -1));

        billPatientJButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        billPatientJButton1.setText("Create Patient Bill");
        billPatientJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billPatientJButton1ActionPerformed(evt);
            }
        });
        add(billPatientJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 360, -1, -1));

        billJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity", "Unit Price", "Total"
            }
        ));
        jScrollPane2.setViewportView(billJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 470, -1, 140));

        claimInsuranceJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        claimInsuranceJButton.setText("Claim Insurance");
        claimInsuranceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                claimInsuranceJButtonActionPerformed(evt);
            }
        });
        add(claimInsuranceJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 360, -1, -1));

        totalJLabel.setText("jLabel2");
        add(totalJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 630, -1, -1));

        backButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 680, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void deletePatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientJButtonActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = patientJTable.getSelectedRows();

        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(null, "Please select a Patient to delete!");
            return;
        }

        JOptionPane.showConfirmDialog(null, "Do you want to delete the patient(s)?");
        int option = JOptionPane.YES_NO_OPTION;

        if (option == JOptionPane.YES_OPTION) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                Patient patient = (Patient) patientJTable.getValueAt(selectedRows[i], 0);
                userAccount.getEmployee().getHospital().getPatientDirectory().getPatientDirectory().remove(patient);
            }
        }
        populateTable();
    }//GEN-LAST:event_deletePatientJButtonActionPerformed

    private void viewbillPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbillPatientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientJTable.getSelectedRow();
        int selectedRowCount = patientJTable.getSelectedRowCount();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patient");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one patient");
            return;
        }

        Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
        populateBill(patient);
        totalJLabel.setText("Total Amount: " + String.valueOf(patient.getBillAmount()));

    }//GEN-LAST:event_viewbillPatientJButtonActionPerformed

    private void addPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientJButtonActionPerformed
        // TODO add your handling code here:
        JTextField fname = new JTextField();
        JTextField lname = new JTextField();
        JTextField age = new JTextField();
        JComboBox insuranceType = new JComboBox();
        JTextField insurancePC = new JTextField();

        insuranceType.addItem("Fully Insured");
        insuranceType.addItem("Partially Insured");
        insuranceType.addItem("Not Insured");

        Object[] addPatient = {"First Name:", fname, "Last Name:", lname, "Age:", age, "Insurance Status:", insuranceType, "Percentage Covered:", insurancePC};
        JOptionPane.showConfirmDialog(null, addPatient, "Add Patient", JOptionPane.OK_CANCEL_OPTION, -1);

        try {

            if (insurancePC.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide values for all the fields");
                return;
            }

            if (fname.getText().isEmpty() || lname.getText().isEmpty() || age.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide values for all the fields");
                return;
            }

            String firstName = fname.getText();
            String lastName = lname.getText();
            int age2 = Integer.parseInt(age.getText());
            String insType = (String) insuranceType.getSelectedItem();
            int pc = Integer.parseInt(insurancePC.getText());

            Patient patient = new Patient();
            patient.setName(firstName + " " + lastName);
            patient.setAge(age2);
            patient.setInsuranceStatus(insType);

            if (insType.equals("Partially Insured")) {
                patient.setInsuranceCoverage(pc);
            } else if (insType.equals("Fully Insured")) {
                patient.setInsuranceCoverage(100);
            } else if (insType.equals("Not Insured")) {
                patient.setInsuranceCoverage(0);
            }
            userAccount.getEmployee().getHospital().getPatientDirectory().getPatientDirectory().add(patient);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please provide valid inputs");
            return;
        }

        JOptionPane.showMessageDialog(null, "Patient added successfully");
        populateTable();

    }//GEN-LAST:event_addPatientJButtonActionPerformed

    private void billPatientJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billPatientJButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientJTable.getSelectedRow();
        int selectedRowCount = patientJTable.getSelectedRowCount();
        JTextField quantityJTextField = new JTextField();
        JTextField priceJTextField = new JTextField();
        JComboBox vaccineJComboBox = new JComboBox();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patient");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one patient");
            return;
        }

        Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);

        vaccineJComboBox.removeAllItems();
        for (Vaccine v : system.getVaccineCatalog().getVaccineCatalog()) {
            vaccineJComboBox.addItem(v.getVaccineName());
        }

        Object[] billPatient = {"Vaccine Name:", vaccineJComboBox, "Quantity:", quantityJTextField, "Unit Price:", priceJTextField};
        JOptionPane.showConfirmDialog(null, billPatient, "Bill Patient", JOptionPane.OK_CANCEL_OPTION, -1);

        float tempTotal = 0;

        try {
            String vaccineName = (String) vaccineJComboBox.getSelectedItem();
            int quantity = Integer.parseInt(quantityJTextField.getText());
            int price = Integer.parseInt(priceJTextField.getText());

            Vaccine v = new Vaccine();
            v.setVaccineName(vaccineName);
            v.setAvailability(quantity);
            v.setPrice(price);
            patient.getVaccineCatalog().getVaccineCatalog().add(v);

            for (Vaccine vaccine : patient.getVaccineCatalog().getVaccineCatalog()) {
                tempTotal = vaccine.getPrice() * vaccine.getAvailability() + tempTotal;
            }

            patient.setBillAmount(tempTotal);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please provide a valid input");
            return;
        }
        JOptionPane.showMessageDialog(null, "Vaccine added successfully to the patient's bill");
        vaccineJComboBox.setSelectedIndex(0);
        quantityJTextField.setText(null);
        priceJTextField.setText(null);

    }//GEN-LAST:event_billPatientJButton1ActionPerformed

    private void claimInsuranceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_claimInsuranceJButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = patientJTable.getSelectedRow();
        int selectedRowCount = patientJTable.getSelectedRowCount();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patient");
            return;
        }
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one patient");
            return;
        }

        Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);

        if (patient.isAlreadyClaimed()) {
            JOptionPane.showMessageDialog(null, "A claim has already been requested for this patient");
            return;
        }

        patient.setAlreadyClaimed(true);
        FinanceWorkRequest financeWorkRequest = new FinanceWorkRequest();
        financeWorkRequest.setBillingDate(new SimpleDateFormat("MM-dd-yyyy").format(new Date()));
        financeWorkRequest.setPatient(patient);
        financeWorkRequest.setSender(userAccount);
        financeWorkRequest.setRequestType("Finance");
        financeWorkRequest.setPaymentMode("N/A");

        if (patient.getInsuranceStatus().equals("Fully Insured")) {
            financeWorkRequest.setTotalAmount(patient.getBillAmount());
            financeWorkRequest.setPaidDate(new SimpleDateFormat("MM-dd-yyyy").format(new Date()));
            financeWorkRequest.setStatus("Paid by the Insurance Company");
        }

        if (patient.getInsuranceStatus().equals("Partially Insured")) {
            float a = (float) (100 - patient.getInsuranceCoverage()) / 100;
            float total = (float) (patient.getBillAmount()) * a;
            financeWorkRequest.setTotalAmount(total);
            financeWorkRequest.setStatus("Partially paid by insurance and rest to be paid by CDC");

        }

        if (patient.getInsuranceStatus().equals("Not Insured")) {
            financeWorkRequest.setTotalAmount(patient.getBillAmount());
            financeWorkRequest.setStatus("Payment pending from CDC");
            financeWorkRequest.setPayer("CDC");
        }

        WorkRequest request = financeWorkRequest;
        system.getWorkQueue().getWorkRequestList().add(request);
        JOptionPane.showMessageDialog(null, "The claim request has been sent to finance department");
    }//GEN-LAST:event_claimInsuranceJButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatientJButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable billJTable;
    private javax.swing.JButton billPatientJButton1;
    private javax.swing.JButton claimInsuranceJButton;
    private javax.swing.JButton deletePatientJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientJTable;
    private javax.swing.JLabel totalJLabel;
    private javax.swing.JButton viewbillPatientJButton;
    // End of variables declaration//GEN-END:variables
}
